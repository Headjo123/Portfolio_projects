<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/PHILP KANNEH/Desktop/SQL Projects/Housing_Data.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2944"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,22:mainNashville_Housing_Data"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Housing_data" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="65"/><column index="2" value="108"/><column index="3" value="169"/><column index="4" value="290"/><column index="5" value="124"/><column index="6" value="67"/><column index="7" value="117"/><column index="8" value="98"/><column index="9" value="300"/><column index="10" value="300"/><column index="11" value="63"/><column index="12" value="181"/><column index="13" value="75"/><column index="14" value="93"/><column index="15" value="76"/><column index="16" value="67"/><column index="17" value="72"/><column index="18" value="58"/><column index="19" value="63"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Nashville_Housing_Data" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="65"/><column index="2" value="108"/><column index="3" value="169"/><column index="4" value="290"/><column index="5" value="73"/><column index="6" value="67"/><column index="7" value="117"/><column index="8" value="98"/><column index="9" value="300"/><column index="10" value="300"/><column index="11" value="63"/><column index="12" value="181"/><column index="13" value="75"/><column index="14" value="93"/><column index="15" value="76"/><column index="16" value="67"/><column index="17" value="72"/><column index="18" value="58"/><column index="19" value="63"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">/*
Cleaning Data using SQL Queries
*/
SELECT SaleDate
FROM Nashville_Housing_Data 
 

--  Populate property addtress data
SELECT*
FROM Nashville_Housing_Data
WHERE PropertyAddress is NULL
ORDER by ParcelID


/*This block of code below is a self join. While going through the dataset, I found that
some ParcelIDs are the same. and also have the same Property address. It will be 
useful to use the PropertyAddresses of the duplicate ParcelIDs to fill out the NULL
PropertyAddress cells.*/
SELECT na_a.PropertyAddress, na_a.ParcelID, na_b.PropertyAddress, na_b.ParcelID, coalesce(na_a.PropertyAddress, na_b.PropertyAddress)
FROM Nashville_Housing_Data na_a
JOIN Nashville_Housing_Data na_b
	ON na_a.ParcelID = na_b.ParcelID
	AND na_a.UniqueID &lt;&gt; na_b.UniqueID
WHERE na_a.PropertyAddress is NULL


-- Now we update the na_a table with the populated values.
UPDATE Nashville_Housing_Data AS na_a
SET PropertyAddress = (
    SELECT coalesce(na_a.PropertyAddress, na_b.PropertyAddress)
    FROM Nashville_Housing_Data AS na_b
    WHERE na_a.ParcelID = na_b.ParcelID
          AND na_a.UniqueID &lt;&gt; na_b.UniqueID
)
WHERE na_a.PropertyAddress IS NULL;


-- Seperating the values in property address into different columns (Adress, City)
SELECT
       SUBSTR(PropertyAddress, 1, INSTR(PropertyAddress, ',') - 1) AS Address,
	   SUBSTR(PropertyAddress, INSTR(PropertyAddress, ',') + 1, length(PropertyAddress)) AS City
FROM Nashville_Housing_Data;


-- Update table with 2 new columns.
ALTER TABLE Nashville_Housing_Data
ADD COLUMN SplitPropertyAddress TEXT(255)

ALTER TABLE Nashville_Housing_Data
ADD COLUMN SpltPropertyCity TEXT(255)

UPDATE Nashville_Housing_Data
SET SplitPropertyAddress = SUBSTR(PropertyAddress, 1, INSTR(PropertyAddress, ',') - 1),
	SpltPropertyCity = SUBSTR(PropertyAddress, INSTR(PropertyAddress, ',') + 1, length(PropertyAddress))

SELECT OwnerAddress
FROM Nashville_Housing_Data;


-- Seperate the values in OwnerAddress into 3 columns (Address, State, Country)
SELECT
    SUBSTR(OwnerAddress, 1, INSTR(OwnerAddress, ',') - 1) AS Address,
	SUBSTR(PropertyAddress, INSTR(PropertyAddress, ',') + 1, length(PropertyAddress)) AS City,
	SUBSTR(OwnerAddress, -2) AS Country
FROM Nashville_Housing_Data;


-- Update table with the 3 new columns
ALTER TABLE Nashville_Housing_Data
ADD COLUMN SplitOwnerAddress TEXT(255)

ALTER TABLE Nashville_Housing_Data
ADD COLUMN SpltOwnerCity TEXT(255)

ALTER TABLE Nashville_Housing_Data
ADD COLUMN SpltOwnerCountry TEXT(255);

UPDATE Nashville_Housing_Data
SET SplitOwnerAddress = SUBSTR(OwnerAddress, 1, INSTR(OwnerAddress, ',') - 1),
	SpltOwnerCity  = SUBSTR(PropertyAddress, INSTR(PropertyAddress, ',') + 1, length(PropertyAddress)),
	SpltOwnerCountry = SUBSTR(OwnerAddress, -2);

SELECT *
FROM Nashville_Housing_Data;


-- Review the values in the SoldAsVacant column and ensure consistency
SELECT DISTINCT(SoldAsVacant), COUNT(SoldAsVacant)
FROM Nashville_Housing_Data
GROUP by SoldAsVacant
ORDER by 2

SELECT SoldAsVacant
,	CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
		 WHEN SoldAsVacant = 'N' THEN 'No'
		 ELSE SoldAsVacant
		 END AS SoldAsVacantReviewed
FROM Nashville_Housing_Data


-- Update the SoldAsVacant column with the corrected values 
UPDATE Nashville_Housing_Data
SET SoldAsVacant = 
		 CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
		 WHEN SoldAsVacant = 'N' THEN 'No'
		 ELSE SoldAsVacant
		 END;

SELECT *
FROM Nashville_Housing_Data;


-- Delete Duplicate rows.
WITH IdsToDelete AS (
    SELECT UniqueID
    FROM (
        SELECT *,
               ROW_NUMBER() OVER (
                   PARTITION BY ParcelID,
                          PropertyAddress,
                          SalePrice,
                          SaleDate,
                          LegalReference
                   ORDER BY UniqueID
               ) row_num
        FROM Nashville_Housing_Data
    ) AS RowNumSubquery
    WHERE row_num &gt; 1
)
DELETE FROM Nashville_Housing_Data
WHERE UniqueID IN (SELECT UniqueID FROM IdsToDelete);


-- Delete unused columns. NB:  This is a copy of the original table
SELECT *
FROM Nashville_Housing_Data

ALTER TABLE Nashville_Housing_Data
DROP COLUMN OwnerAddress;

ALTER TABLE Nashville_Housing_Data
DROP COLUMN PropertyAddress;

ALTER TABLE Nashville_Housing_Data
DROP COLUMN TaxDistrict;</sql><current_tab id="0"/></tab_sql></sqlb_project>
